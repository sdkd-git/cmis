{"version":3,"sources":["../../src/controllers/user.js"],"names":["User","db","create","req","res","body","policestation","name","phone","role","rank","userid","password","cityId","stateId","districtId","findAll","where","then","user","length","status","json","newUser","bcrypt","genSalt","err","salt","hash","catch","login","errors","isValid","originalPassword","dataValues","compare","isMatch","id","username","payload","jwt","sign","expiresIn","token","success","console","log","findAllUsers","params","attributes","findAdminUsers","findById","userId","msg","update","currentUserByPhone","JSON","parse","parseInt","deleteUser","destroy"],"mappings":"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","file":"user.js","sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport passport from 'passport';\r\n\r\nimport db from '../models';\r\nconst User = db.User;\r\n\r\n// load input validation\r\nimport validateRegisterForm from '../validation/register';\r\nimport validateLoginForm from '../validation/login';\r\n\r\n// create user\r\nconst create = (req, res) => {\r\n  //const { errors, isValid } = validateRegisterForm(req.body);\r\n  let {\r\n    policestation,\r\n    name,\r\n    phone,\r\n    role,\r\n    rank,\r\n    userid,\r\n    password,\r\n    cityId,\r\n    stateId,\r\n    districtId\r\n  } = req.body;\r\n\r\n\r\n  // check validation\r\n  // if(!isValid) {\r\n  //   return res.status(400).json(errors);\r\n  // }\r\n\r\n  User.findAll({\r\n    where: {\r\n      phone\r\n    }\r\n  }).then(user => {\r\n    if (user.length) {\r\n      return res.status(400).json({\r\n        userid: 'User already exists!'\r\n      });\r\n    } else {\r\n      let newUser = {\r\n        policestation,\r\n        name,\r\n        phone,\r\n        role,\r\n        rank,\r\n        userid,\r\n        password,\r\n        cityId,\r\n        stateId,\r\n        districtId\r\n      };\r\n      bcrypt.genSalt(10, (err, salt) => {\r\n        bcrypt.hash(newUser.password, salt, (err, hash) => {\r\n          if (err) throw err;\r\n          newUser.password = hash;\r\n          User.create(newUser)\r\n            .then(user => {\r\n              res.json({\r\n                user\r\n              });\r\n            })\r\n            .catch(err => {\r\n              res.status(500).json({\r\n                err\r\n              });\r\n            });\r\n        });\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nconst login = (req, res) => {\r\n  const {\r\n    errors,\r\n    isValid\r\n  } = validateLoginForm(req.body);\r\n\r\n  // check validation\r\n  if (!isValid) {\r\n    return res.status(400).json(errors);\r\n  }\r\n\r\n  const {\r\n    userid,\r\n    password,\r\n    phone\r\n  } = req.body;\r\n\r\n // console.log(userid, password)\r\n\r\n  User.findAll({\r\n      where: {\r\n        userid,\r\n        phone\r\n      }\r\n    })\r\n    .then(user => {\r\n      //check for user\r\n\r\n      if (!user.length) {\r\n        errors.userid = 'User not found LOGIN!';\r\n        return res.status(404).json(errors);\r\n      }\r\n      let originalPassword = user[0].dataValues.password\r\n    //  console.log(originalPassword, 'originalPassword', user, 'user')\r\n      //check for password\r\n      bcrypt\r\n        .compare(password, originalPassword)\r\n        .then(isMatch => {\r\n       //   console.log(isMatch, 'isMatch')\r\n          if (isMatch) {\r\n            // user matched\r\n          //  console.log('matched!')\r\n            const {\r\n              id,\r\n              username\r\n            } = user[0].dataValues;\r\n            const payload = {\r\n              id,\r\n              username\r\n            }; //jwt payload\r\n            // console.log(payload)\r\n\r\n            jwt.sign(payload, 'secret', {\r\n              expiresIn: 3600\r\n            }, (err, token) => {\r\n              res.json({\r\n                success: true,\r\n                token: 'Bearer ' + token,\r\n                role: user[0].dataValues.role,\r\n                cityId: user[0].dataValues.cityId,\r\n                stateId: user[0].dataValues.stateId,\r\n                districtId: user[0].dataValues.districtId,\r\n                id: user[0].dataValues.id,\r\n                userid: user[0].dataValues.userid,\r\n              });\r\n            });\r\n          } else {\r\n            errors.password = 'Password not correct';\r\n            return res.status(400).json(errors);\r\n          }\r\n        }).catch(err => console.log(err));\r\n    }).catch(err => res.status(500).json({\r\n      err\r\n    }));\r\n};\r\n\r\n// fetch all users\r\nconst findAllUsers = (req, res) => {\r\n  const cityId = req.params.cityId;\r\n  const role = req.params.role;\r\n  User.findAll({\r\n      where: {\r\n        cityId,\r\n        role\r\n      },\r\n      attributes: ['name', 'phone', 'userid', 'districtId', 'cityId', 'id']\r\n    })\r\n    .then(user => {\r\n      res.json({\r\n        user\r\n      });\r\n    })\r\n    .catch(err => res.status(500).json({\r\n      err\r\n    }));\r\n};\r\n\r\n\r\nconst findAdminUsers = (req, res) => {\r\n  const role = req.params.role;\r\n  User.findAll({\r\n      where: {\r\n        role\r\n      },\r\n      attributes: ['name', 'phone', 'userid', 'cityId', 'id']\r\n    })\r\n    .then(user => {\r\n      res.json({\r\n        user\r\n      });\r\n    })\r\n    .catch(err => res.status(500).json({\r\n      err\r\n    }));\r\n};\r\n\r\n// fetch user by userId\r\nconst findById = (req, res) => {\r\n  const id = req.params.userId;\r\n\r\n  User.findAll({\r\n      where: {\r\n        id\r\n      }\r\n    })\r\n    .then(user => {\r\n      if (!user.length) {\r\n        return res.json({\r\n          msg: 'user not found USER'\r\n        })\r\n      }\r\n      res.json({\r\n        user\r\n      })\r\n    })\r\n    .catch(err => res.status(500).json({\r\n      err\r\n    }));\r\n};\r\n\r\n// update a user's info\r\nconst update = async (req, res) => {\r\n  const {\r\n    errors,\r\n    isValid\r\n  } = validateLoginForm(req.body);\r\n  const id = req.params.userId;\r\n  const phone = req.body.phone\r\n  // let currentUser = await User.findAll({\r\n  //   where: {\r\n  //     id: id\r\n  //   }\r\n  // })\r\n\r\n  let currentUserByPhone = await User.findAll({\r\n    where: {\r\n      phone: phone\r\n    }\r\n  })\r\n\r\n  if (JSON.parse(JSON.stringify(currentUserByPhone)) && JSON.parse(JSON.stringify(currentUserByPhone)).length === 0 || parseInt(JSON.parse(JSON.stringify(currentUserByPhone))[0].id) === parseInt(id)) {\r\n    bcrypt.genSalt(10, (err, salt) => {\r\n      bcrypt.hash(req.body.password, salt, (err, hash) => {\r\n        if (err) throw err;\r\n        req.body.password = hash;\r\n        User.update({\r\n            ...req.body\r\n          }, {\r\n            where: {\r\n              id\r\n            }\r\n          })\r\n          .then(user => res.status(200).json({\r\n            user\r\n          }))\r\n          .catch(err => res.status(500).json({\r\n            err\r\n          }));\r\n      });\r\n    });\r\n  } else {\r\n    errors.userid = 'User Already Used this mobile';\r\n    return res.status(404).json(errors);\r\n  }\r\n\r\n};\r\n\r\n// delete a user\r\nconst deleteUser = (req, res) => {\r\n  const id = req.params.userId;\r\n\r\n  User.destroy({\r\n      where: {\r\n        id\r\n      }\r\n    })\r\n    .then(() => res.status.json({\r\n      msg: 'User has been deleted successfully!'\r\n    }))\r\n    .catch(err => res.status(500).json({\r\n      msg: 'Failed to delete!'\r\n    }));\r\n};\r\n\r\nexport {\r\n  create,\r\n  login,\r\n  findAllUsers,\r\n  findById,\r\n  update,\r\n  deleteUser,\r\n  findAdminUsers\r\n}"]}